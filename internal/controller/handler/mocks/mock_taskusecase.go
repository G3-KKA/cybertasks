// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock_handler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "cybertask/model"

	uuid "github.com/google/uuid"
)

// MockTaskUsecase is an autogenerated mock type for the TaskUsecase type
type MockTaskUsecase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *MockTaskUsecase) CreateTask(ctx context.Context, task model.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *MockTaskUsecase) DeleteTask(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *MockTaskUsecase) GetTask(ctx context.Context, id uuid.UUID) (model.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *MockTaskUsecase) UpdateTask(ctx context.Context, task model.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTaskUsecase creates a new instance of MockTaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskUsecase {
	mock := &MockTaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
